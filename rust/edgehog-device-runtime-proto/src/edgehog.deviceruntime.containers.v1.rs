// This file is @generated by prost-build.
/// Request to list containers.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListContainerRequest {
    /// Optional: Filter containers by a specific status (e.g., "running",
    /// "stopped").
    #[prost(string, tag = "1")]
    pub status_filter: ::prost::alloc::string::String,
    /// Optional: Include all containers, even those that are stopped or exited.
    #[prost(bool, tag = "2")]
    pub all: bool,
}
/// Response containing a list of containers.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListContainerResponse {
    /// A list of container objects.
    #[prost(message, repeated, tag = "1")]
    pub containers: ::prost::alloc::vec::Vec<Container>,
}
/// Request to get details of a single container.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerRequest {
    /// The ID or name of the container to retrieve.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
/// Response containing details of a single container.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerResponse {
    /// The requested container object.
    #[prost(message, optional, tag = "1")]
    pub container: ::core::option::Option<Container>,
}
/// Request to start a container.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartContainerRequest {
    /// The ID or name of the container to start.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
/// Request to stop a container.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopContainerRequest {
    /// The ID or name of the container to stop.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// The timeout in seconds to wait for the container to stop.
    #[prost(int32, optional, tag = "2")]
    pub timeout: ::core::option::Option<i32>,
}
/// Request to stream container statistics.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatsContainerRequest {
    /// The ID or name of the container to get statistics for.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Interval in seconds between stats updates.
    #[prost(int32, optional, tag = "2")]
    pub interval_seconds: ::core::option::Option<i32>,
}
/// A single stream of container statistics.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatsContainerStream {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub cpu_usage_percent: f64,
    #[prost(uint64, tag = "3")]
    pub memory_usage_bytes: u64,
    #[prost(uint64, tag = "4")]
    pub memory_limit_bytes: u64,
    /// Key: interface name (e.g., "eth0")
    #[prost(map = "string, message", tag = "5")]
    pub network_stats: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        NetworkStats,
    >,
    #[prost(message, repeated, tag = "6")]
    pub blkio_stats: ::prost::alloc::vec::Vec<BlkioStat>,
}
/// Represents network statistics for an interface.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NetworkStats {
    #[prost(uint64, tag = "1")]
    pub rx_bytes: u64,
    #[prost(uint64, tag = "2")]
    pub tx_bytes: u64,
    #[prost(uint64, tag = "3")]
    pub rx_packets: u64,
    #[prost(uint64, tag = "4")]
    pub tx_packets: u64,
    #[prost(uint64, tag = "5")]
    pub rx_errors: u64,
    #[prost(uint64, tag = "6")]
    pub tx_errors: u64,
    #[prost(uint64, tag = "7")]
    pub rx_dropped: u64,
    #[prost(uint64, tag = "8")]
    pub tx_dropped: u64,
}
/// Represents block I/O statistics.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlkioStat {
    /// e.g., "8:0" for sda
    #[prost(string, tag = "1")]
    pub device_major_minor: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub bytes_read: u64,
    #[prost(uint64, tag = "3")]
    pub bytes_written: u64,
    #[prost(uint64, tag = "4")]
    pub ops_read: u64,
    #[prost(uint64, tag = "5")]
    pub ops_written: u64,
}
/// A generic message representing a container. This could be more detailed
/// depending on the information you want to expose.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Container {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub hostname: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub image: ::prost::alloc::string::String,
    /// e.g., "running", "exited", "paused"
    #[prost(string, tag = "4")]
    pub status: ::prost::alloc::string::String,
    /// More detailed state, e.g., "running", "created", "restarting"
    #[prost(string, tag = "5")]
    pub state: ::prost::alloc::string::String,
    /// Timestamp of creation
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "8")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Generated client implementations.
pub mod containers_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service for managing containers on a device.
    #[derive(Debug, Clone)]
    pub struct ContainersClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ContainersClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ContainersClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ContainersClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ContainersClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// List all containers.
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.Containers/List",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "edgehog.deviceruntime.containers.v1.Containers",
                        "List",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get details of a specific container.
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.Containers/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "edgehog.deviceruntime.containers.v1.Containers",
                        "Get",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Start a container.
        pub async fn start(
            &mut self,
            request: impl tonic::IntoRequest<super::StartContainerRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.Containers/Start",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "edgehog.deviceruntime.containers.v1.Containers",
                        "Start",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Stop a container.
        pub async fn stop(
            &mut self,
            request: impl tonic::IntoRequest<super::StopContainerRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.Containers/Stop",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "edgehog.deviceruntime.containers.v1.Containers",
                        "Stop",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Stream container statistics.
        pub async fn stats(
            &mut self,
            request: impl tonic::IntoRequest<super::StatsContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::StatsContainerStream>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.Containers/Stats",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "edgehog.deviceruntime.containers.v1.Containers",
                        "Stats",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod containers_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ContainersServer.
    #[async_trait]
    pub trait Containers: std::marker::Send + std::marker::Sync + 'static {
        /// List all containers.
        async fn list(
            &self,
            request: tonic::Request<super::ListContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListContainerResponse>,
            tonic::Status,
        >;
        /// Get details of a specific container.
        async fn get(
            &self,
            request: tonic::Request<super::GetContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetContainerResponse>,
            tonic::Status,
        >;
        /// Start a container.
        async fn start(
            &self,
            request: tonic::Request<super::StartContainerRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// Stop a container.
        async fn stop(
            &self,
            request: tonic::Request<super::StopContainerRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// Server streaming response type for the Stats method.
        type StatsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::StatsContainerStream, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Stream container statistics.
        async fn stats(
            &self,
            request: tonic::Request<super::StatsContainerRequest>,
        ) -> std::result::Result<tonic::Response<Self::StatsStream>, tonic::Status>;
    }
    /// Service for managing containers on a device.
    #[derive(Debug)]
    pub struct ContainersServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ContainersServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ContainersServer<T>
    where
        T: Containers,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/edgehog.deviceruntime.containers.v1.Containers/List" => {
                    #[allow(non_camel_case_types)]
                    struct ListSvc<T: Containers>(pub Arc<T>);
                    impl<
                        T: Containers,
                    > tonic::server::UnaryService<super::ListContainerRequest>
                    for ListSvc<T> {
                        type Response = super::ListContainerResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListContainerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Containers>::list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/edgehog.deviceruntime.containers.v1.Containers/Get" => {
                    #[allow(non_camel_case_types)]
                    struct GetSvc<T: Containers>(pub Arc<T>);
                    impl<
                        T: Containers,
                    > tonic::server::UnaryService<super::GetContainerRequest>
                    for GetSvc<T> {
                        type Response = super::GetContainerResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetContainerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Containers>::get(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/edgehog.deviceruntime.containers.v1.Containers/Start" => {
                    #[allow(non_camel_case_types)]
                    struct StartSvc<T: Containers>(pub Arc<T>);
                    impl<
                        T: Containers,
                    > tonic::server::UnaryService<super::StartContainerRequest>
                    for StartSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StartContainerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Containers>::start(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StartSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/edgehog.deviceruntime.containers.v1.Containers/Stop" => {
                    #[allow(non_camel_case_types)]
                    struct StopSvc<T: Containers>(pub Arc<T>);
                    impl<
                        T: Containers,
                    > tonic::server::UnaryService<super::StopContainerRequest>
                    for StopSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StopContainerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Containers>::stop(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StopSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/edgehog.deviceruntime.containers.v1.Containers/Stats" => {
                    #[allow(non_camel_case_types)]
                    struct StatsSvc<T: Containers>(pub Arc<T>);
                    impl<
                        T: Containers,
                    > tonic::server::ServerStreamingService<super::StatsContainerRequest>
                    for StatsSvc<T> {
                        type Response = super::StatsContainerStream;
                        type ResponseStream = T::StatsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StatsContainerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Containers>::stats(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StatsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ContainersServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "edgehog.deviceruntime.containers.v1.Containers";
    impl<T> tonic::server::NamedService for ContainersServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
