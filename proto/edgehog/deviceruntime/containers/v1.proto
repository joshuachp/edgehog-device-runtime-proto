/** This file is part of Edgehog.
 *
 * Copyright 2025 SECO Mind Srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package edgehog.deviceruntime.containers.v1;

import "google/protobuf/empty.proto"; // Import for google.protobuf.Empty

// Service for managing containers on a device.
service Containers {
  // List all containers.
  rpc List(ListContainerRequest) returns (ListContainerResponse) {}
  // Get details of a specific container.
  rpc Get(GetContainerRequest) returns (GetContainerResponse) {}
  // Start a container.
  rpc Start(StartContainerRequest) returns (google.protobuf.Empty) {}
  // Stop a container.
  rpc Stop(StopContainerRequest) returns (google.protobuf.Empty) {}
  // Stream container statistics.
  rpc Stats(StatsContainerRequest) returns (stream StatsContainerStream) {}
}

// Request to list containers.
message ListContainerRequest {
  // Optional: Filter containers by a specific status (e.g., "running",
  // "stopped").
  string status_filter = 1;
  // Optional: Include all containers, even those that are stopped or exited.
  bool all = 2;
}

// Response containing a list of containers.
message ListContainerResponse {
  // A list of container objects.
  repeated Container containers = 1;
}

// Request to get details of a single container.
message GetContainerRequest {
  // The ID or name of the container to retrieve.
  string id = 1;
}

// Response containing details of a single container.
message GetContainerResponse {
  // The requested container object.
  Container container = 1;
}

// Request to start a container.
message StartContainerRequest {
  // The ID or name of the container to start.
  string id = 1;
}

// Request to stop a container.
message StopContainerRequest {
  // The ID or name of the container to stop.
  string id = 1;
  // The timeout in seconds to wait for the container to stop.
  optional int32 timeout = 2;
}

// Request to stream container statistics.
message StatsContainerRequest {
  // The ID or name of the container to get statistics for.
  string id = 1;
  // Interval in seconds between stats updates.
  optional int32 interval_seconds = 2;
}

// A single stream of container statistics.
message StatsContainerStream {
  string container_id = 1;
  double cpu_usage_percent = 2;
  uint64 memory_usage_bytes = 3;
  uint64 memory_limit_bytes = 4;
  map<string, NetworkStats> network_stats =
      5; // Key: interface name (e.g., "eth0")
  repeated BlkioStat blkio_stats = 6;
}

// Represents network statistics for an interface.
message NetworkStats {
  uint64 rx_bytes = 1;
  uint64 tx_bytes = 2;
  uint64 rx_packets = 3;
  uint64 tx_packets = 4;
  uint64 rx_errors = 5;
  uint64 tx_errors = 6;
  uint64 rx_dropped = 7;
  uint64 tx_dropped = 8;
}

// Represents block I/O statistics.
message BlkioStat {
  string device_major_minor = 1; // e.g., "8:0" for sda
  uint64 bytes_read = 2;
  uint64 bytes_written = 3;
  uint64 ops_read = 4;
  uint64 ops_written = 5;
}

// A generic message representing a container. This could be more detailed
// depending on the information you want to expose.
message Container {
  string id = 1;
  string hostname = 2;
  string image = 3;
  string status = 4; // e.g., "running", "exited", "paused"
  string state =
      5; // More detailed state, e.g., "running", "created", "restarting"
  string created_at = 7; // Timestamp of creation
  map<string, string> labels = 8;
}
